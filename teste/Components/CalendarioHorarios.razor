@using teste.Services
@using teste.Models
@inject HorarioService HorarioService

@rendermode InteractiveServer

<div class="calendario-horarios">
    <style>
        /* Mantenha seus estilos CSS aqui */
        .calendario-horarios {
            background-color: #2d2d2d;
            border-radius: 8px;
            padding: 20px;
        }

        .horarios-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 10px;
            margin-top: 15px;
        }

        .horario-btn {
            padding: 10px;
            border-radius: 6px;
            transition: all 0.3s ease;
        }

            .horario-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            }

            .horario-btn.active {
                background-color: #007bff;
                border-color: #007bff;
                color: white;
            }

        .form-control, .form-select {
            background-color: #404040;
            border: 1px solid #505050;
            color: #ffffff;
        }

            .form-control:focus, .form-select:focus {
                background-color: #404040;
                border-color: #007bff;
                color: #ffffff;
                box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
            }

        .alert {
            background-color: #2d2d2d;
            border: 1px solid #404040;
        }

        .alert-success {
            background-color: #1e4d2b;
            border-color: #28a745;
            color: #d4edda;
        }

        .alert-info {
            background-color: #1e3a5f;
            border-color: #17a2b8;
            color: #d1ecf1;
        }
    </style>
    <div class="row mb-3">
        <div class="col-md-6">
            <label for="servicoSelect" class="form-label">Serviço:</label>
            <select id="servicoSelect" class="form-select" @onchange="OnServicoChanged" value="@ServicoSelecionadoId">
                <option value="0">Selecione um serviço</option>
                @if (Servicos != null)
                {
                    @foreach (var servico in Servicos)
                    {
                        <option value="@servico.Id">@servico.Nome - @servico.DuracaoEmMinutos min - R$ @servico.Preco.ToString("F2")</option>
                    }
                }
            </select>
        </div>
        <div class="col-md-6">
            <label for="dataSelect" class="form-label">Data:</label>
            <input type="date" id="dataSelect" class="form-control" @onchange="OnDataChanged" value="@DataSelecionada?.ToString("yyyy-MM-dd")" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
        </div>
    </div>

    @if (ServicoSelecionadoId > 0 && DataSelecionada.HasValue)
    {
        <div class="row">
            <div class="col-12">
                <h5>Horários Disponíveis para @DataSelecionada.Value.ToString("dd/MM/yyyy"):</h5>

                @if (HorariosDisponiveis != null && HorariosDisponiveis.Any())
                {
                    <div class="horarios-grid">
                        @foreach (var horario in HorariosDisponiveis)
                        {
                            <button type="button"
                                    class="btn btn-outline-primary horario-btn @(HorarioSelecionado.HasValue && horario.Equals(HorarioSelecionado.Value) ? "active" : "")"
                                    @onclick="@(() => SelecionarHorario(horario))">
                                @horario.ToString("HH:mm")
                            </button>
                        }
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        Não há horários disponíveis para esta data e serviço.
                    </div>
                }
            </div>
        </div>
    }

    @if (HorarioSelecionado.HasValue)
    {
        <div class="row mt-3">
            <div class="col-12">
                <div class="alert alert-success">
                    <strong>Horário Selecionado:</strong> @HorarioSelecionado.Value.ToString("dd/MM/yyyy HH:mm")
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<Servico> Servicos { get; set; } = new();

    [Parameter]
    public DateTime? HorarioSelecionado { get; set; }

    [Parameter]
    public EventCallback<DateTime> HorarioSelecionadoChanged { get; set; }

    [Parameter]
    public int ServicoSelecionadoId { get; set; }

    [Parameter]
    public EventCallback<int> ServicoSelecionadoIdChanged { get; set; }

    private DateTime? DataSelecionada { get; set; } = DateTime.Today;
    private List<DateTime> HorariosDisponiveis { get; set; } = new();

    protected override void OnInitialized()
    {
        DataSelecionada = DateTime.Today;
        if (ServicoSelecionadoId == 0 && Servicos.Any())
        {
            ServicoSelecionadoId = Servicos.First().Id;
            ServicoSelecionadoIdChanged.InvokeAsync(ServicoSelecionadoId);
        }
    }

    private async Task OnServicoChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int servicoId))
        {
            ServicoSelecionadoId = servicoId;
            await ServicoSelecionadoIdChanged.InvokeAsync(servicoId);
            await CarregarHorarios();
        }
        else
        {
            ServicoSelecionadoId = 0; // Se o parse falhar, defina como 0 (nenhum serviço selecionado)
            await ServicoSelecionadoIdChanged.InvokeAsync(0);
            HorariosDisponiveis = new List<DateTime>(); // Limpa os horários
            StateHasChanged();
        }
    }

    private async Task OnDataChanged(ChangeEventArgs e)
    {
        // Tenta fazer o parse da string para DateTime
        // Usamos TryParseExact para garantir que o formato "yyyy-MM-dd" seja o esperado
        if (DateTime.TryParseExact(e.Value?.ToString(), "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out DateTime data))
        {
            // Se o parse for bem-sucedido, atribui a data
            DataSelecionada = data;
        }
        else
        {
            // Se o parse falhar, define DataSelecionada como null
            DataSelecionada = null;
            // Opcional: Logar ou exibir uma mensagem de erro para o usuário
            Console.WriteLine($"AVISO: Formato de data inválido ou data vazia: {e.Value}");
        }

        // Independentemente do parse, tente carregar os horários.
        // CarregarHorarios já tem a lógica para lidar com DataSelecionada == null ou ServicoSelecionadoId == 0.
        await CarregarHorarios();
    }

    private async Task CarregarHorarios()
    {
        // Certifique-se de que o ServicoSelecionadoId é válido e DataSelecionada tem um valor
        if (ServicoSelecionadoId > 0 && DataSelecionada.HasValue)
        {
            try
            {
                HorariosDisponiveis = await HorarioService.GetHorariosDisponiveisAsync(DataSelecionada.Value, ServicoSelecionadoId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao carregar horários: {ex.Message}");
                HorariosDisponiveis = new List<DateTime>(); // Limpa a lista em caso de erro
                // Considerar exibir uma mensagem de erro na UI aqui se for o caso
            }
        }
        else
        {
            HorariosDisponiveis = new List<DateTime>(); // Limpa a lista se a seleção for inválida
        }
        StateHasChanged(); // Garante que a UI é atualizada
    }

    private async Task SelecionarHorario(DateTime horario)
    {
        HorarioSelecionado = horario;
        await HorarioSelecionadoChanged.InvokeAsync(horario);
        StateHasChanged();
    }
}
