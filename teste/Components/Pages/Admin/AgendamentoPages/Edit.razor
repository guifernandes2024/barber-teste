@page "/admin/agendamentos/edit"
@attribute [Authorize]
@using Microsoft.EntityFrameworkCore
@using teste.Models
@inject IDbContextFactory<teste.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Agendamento</h2>
<hr />
@if (Agendamento is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Agendamento" OnValidSubmit="UpdateAgendamento" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Agendamento.Id" value="@Agendamento.Id" />
                <div class="mb-3">
                    <label for="datahora" class="form-label">DataHora:</label>
                    <InputDate id="datahora" @bind-Value="Agendamento.DataHora" class="form-control" />
                    <ValidationMessage For="() => Agendamento.DataHora" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="nomedocliente" class="form-label">NomeDoCliente:</label>
                    <InputText id="nomedocliente" @bind-Value="Agendamento.NomeDoCliente" class="form-control" />
                    <ValidationMessage For="() => Agendamento.NomeDoCliente" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="numerodocliente" class="form-label">NumeroDoCliente:</label>
                    <InputText id="numerodocliente" @bind-Value="Agendamento.NumeroDoCliente" class="form-control" />
                    <ValidationMessage For="() => Agendamento.NumeroDoCliente" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="servicoid" class="form-label">ServicoId:</label>
                    <InputNumber id="servicoid" @bind-Value="Agendamento.ServicoId" class="form-control" />
                    <ValidationMessage For="() => Agendamento.ServicoId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="observacoes" class="form-label">Observacoes:</label>
                    <InputText id="observacoes" @bind-Value="Agendamento.Observacoes" class="form-control" />
                    <ValidationMessage For="() => Agendamento.Observacoes" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/admin/agendamentos">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private Agendamento? Agendamento { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Agendamento = await context.Agendamento.FirstOrDefaultAsync(m => m.Id == Id);

        if (Agendamento is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateAgendamento()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Agendamento!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AgendamentoExists(Agendamento!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/admin/agendamentos");
    }

    private bool AgendamentoExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Agendamento.Any(e => e.Id == id);
    }
}
