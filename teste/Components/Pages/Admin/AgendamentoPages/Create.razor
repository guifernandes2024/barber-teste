@page "/admin/agendamentos/create"
@attribute [Authorize]
@using Microsoft.EntityFrameworkCore
@using teste.Models
@using teste.Services
@inject IDbContextFactory<teste.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject HorarioService HorarioService

@rendermode InteractiveServer
<PageTitle>Novo Agendamento - Barbearia</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">üìÖ Novo Agendamento</h1>
            
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Selecione o Hor√°rio</h5>
                </div>
                <div class="card-body">
                    <CalendarioHorarios 
                        Servicos="Servicos" 
                        HorarioSelecionado="HorarioSelecionado"
                        HorarioSelecionadoChanged="OnHorarioSelecionado" />
                </div>
            </div>

            @if (HorarioSelecionado.HasValue)
            {
                <div class="card mt-4">
                    <div class="card-header">
                        <h5 class="mb-0">Dados do Cliente</h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="Agendamento" OnValidSubmit="AddAgendamento">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" role="alert"/>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="nomeDoCliente" class="form-label">Nome do Cliente:</label> 
                                        <InputText id="nomeDoCliente" @bind-Value="Agendamento.NomeDoCliente" class="form-control" required /> 
                                        <ValidationMessage For="() => Agendamento.NomeDoCliente" class="text-danger" /> 
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="numeroDoCliente" class="form-label">Telefone:</label> 
                                        <InputText id="numeroDoCliente" @bind-Value="Agendamento.NumeroDoCliente" class="form-control" required /> 
                                        <ValidationMessage For="() => Agendamento.NumeroDoCliente" class="text-danger" /> 
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="observacoes" class="form-label">Observa√ß√µes:</label> 
                                <InputTextArea id="observacoes" @bind-Value="Agendamento.Observacoes" class="form-control" rows="3" /> 
                                <ValidationMessage For="() => Agendamento.Observacoes" class="text-danger" /> 
                            </div>
                            
                            <div class="alert alert-info">
                                <strong>Agendamento para:</strong> @HorarioSelecionado.Value.ToString("dd/MM/yyyy HH:mm")
                            </div>
                            
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-success">
                                    <i class="fas fa-check"></i> Confirmar Agendamento
                                </button>
                                <a href="/agendamentos" class="btn btn-secondary">
                                    <i class="fas fa-arrow-left"></i> Voltar
                                </a>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Agendamento Agendamento { get; set; } = new();
    private List<Servico> Servicos { get; set; } = new();
    private DateTime? HorarioSelecionado { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Agendamento = new Agendamento();
        await CarregarServicos();
    }

    private async Task CarregarServicos()
    {
        using var context = DbFactory.CreateDbContext();
        Servicos = await context.Servico.ToListAsync();
    }

    private async Task OnHorarioSelecionado(DateTime horario)
    {
        HorarioSelecionado = horario;
        Agendamento.DataHora = horario;
        
        // Por enquanto, vamos usar o primeiro servi√ßo como padr√£o
        if (Servicos.Any())
        {
            Agendamento.ServicoId = Servicos.First().Id;
        }
    }

    private async Task AddAgendamento()
    {
        if (!HorarioSelecionado.HasValue)
        {
            return;
        }

        Agendamento.DataHora = HorarioSelecionado.Value;

        // Verificar disponibilidade antes de salvar
        var disponivel = await HorarioService.VerificarDisponibilidadeAsync(Agendamento.DataHora, Agendamento.ServicoId);
        
        if (!disponivel)
        {
            // Mostrar erro - hor√°rio n√£o est√° mais dispon√≠vel
            return;
        }

        using var context = DbFactory.CreateDbContext();
        context.Agendamento.Add(Agendamento);
        await context.SaveChangesAsync();
        
        NavigationManager.NavigateTo("/admin/agendamentos");
    }
}
