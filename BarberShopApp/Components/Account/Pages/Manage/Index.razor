@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BarberShopApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Perfil - BarberShop</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0"><i class="fas fa-user me-2"></i>Meu Perfil</h3>
                </div>
                <div class="card-body">
                    <StatusMessage />

                    <div class="row">
                        <div class="col-md-6">
                            <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" role="alert" />
                                
                                <div class="mb-3">
                                    <label for="username" class="form-label">Nome de Usuário</label>
                                    <input type="text" value="@username" class="form-control" placeholder="Nome de usuário" disabled />
                                    <small class="form-text text-muted">O nome de usuário não pode ser alterado</small>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="phone-number" class="form-label">Número de Telefone</label>
                                    <input type="text" id="phone-number" class="form-control" 
                                           @bind="Input.PhoneNumber" 
                                           placeholder="(11) 99999-9999" maxlength="15" />
                                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                                    <small class="form-text text-muted">Digite seu número de telefone para contato</small>
                                </div>
                                
                                <div class="d-flex gap-2">
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-save me-2"></i>Salvar Alterações
                                    </button>
                                    <a href="/admin" class="btn btn-secondary">
                                        <i class="fas fa-arrow-left me-2"></i>Voltar
                                    </a>
                                </div>
                            </EditForm>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card bg-light">
                                <div class="card-body">
                                    <h5 class="card-title"><i class="fas fa-info-circle me-2"></i>Informações da Conta</h5>
                                    <div class="mb-3">
                                        <strong>Nome:</strong> @user.Nome
                                    </div>
                                    <div class="mb-3">
                                        <strong>Email:</strong> @user.Email
                                    </div>
                                    <div class="mb-3">
                                        <strong>Telefone:</strong> @(string.IsNullOrEmpty(user.PhoneNumber) ? "Não informado" : user.PhoneNumber)
                                    </div>
                                    <div class="mb-3">
                                        <strong>Status:</strong> 
                                        @if (user.EmailConfirmed)
                                        {
                                            <span class="badge bg-success">Email Confirmado</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">Email Pendente</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Erro: Falha ao definir número de telefone.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Seu perfil foi atualizado com sucesso", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Número de telefone")]
        public string? PhoneNumber { get; set; }
    }
}
