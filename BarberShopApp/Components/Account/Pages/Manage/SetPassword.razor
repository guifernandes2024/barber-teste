@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BarberShopApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Definir Senha - BarberShop</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0"><i class="fas fa-key me-2"></i>Definir Senha</h3>
                </div>
                <div class="card-body">
                    <StatusMessage Message="@message" />
                    
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Informação:</strong> Você não possui uma senha local para este site. 
                        Defina uma senha para poder fazer login sem depender de login externo.
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" role="alert" />
                                
                                <div class="mb-3">
                                    <label for="new-password" class="form-label">Nova Senha</label>
                                    <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" 
                                             autocomplete="new-password" placeholder="Digite sua nova senha" />
                                    <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
                                    <small class="form-text text-muted">A senha deve ter pelo menos 6 caracteres</small>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="confirm-password" class="form-label">Confirmar Senha</label>
                                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" 
                                             autocomplete="new-password" placeholder="Confirme sua nova senha" />
                                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                                </div>
                                
                                <div class="d-flex gap-2">
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-save me-2"></i>Definir Senha
                                    </button>
                                    <a href="/Account/Manage" class="btn btn-secondary">
                                        <i class="fas fa-arrow-left me-2"></i>Voltar
                                    </a>
                                </div>
                            </EditForm>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card bg-light">
                                <div class="card-body">
                                    <h5 class="card-title"><i class="fas fa-shield-alt me-2"></i>Dicas de Segurança</h5>
                                    <ul class="list-unstyled">
                                        <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Use pelo menos 6 caracteres</li>
                                        <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Combine letras, números e símbolos</li>
                                        <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Evite informações pessoais</li>
                                        <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Não use a mesma senha em outros sites</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            message = $"Erro: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Sua senha foi definida com sucesso.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "A {0} deve ter pelo menos {2} e no máximo {1} caracteres.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Nova senha")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirmar nova senha")]
        [Compare("NewPassword", ErrorMessage = "A nova senha e a confirmação não coincidem.")]
        public string? ConfirmPassword { get; set; }
    }
}
