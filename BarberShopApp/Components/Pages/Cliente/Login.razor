@page "/cliente/login"

@layout Layout.EmptyLayout
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BarberShopApp.Data
@using BarberShopApp.Components.Account
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.WebUtilities

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager

<PageTitle>Login - Cliente</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="text-center mb-4">
            <i class="fas fa-user fa-3x text-primary mb-3"></i>
            <h2 class="text-light">Login</h2>
            <p class="text-muted">Faça login para acessar sua conta</p>
        </div>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
            </div>
        }
        
        <EditForm Model="Input" OnValidSubmit="LoginUser" FormName="LoginForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            
            <div class="mb-3">
                <label for="email" class="form-label text-light">Email</label>
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="seu@email.com" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            
            <div class="mb-3">
                <label for="password" class="form-label text-light">Senha</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Sua senha" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            
            <div class="mb-3">
                <div class="form-check">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                    <label class="form-check-label text-light" for="rememberMe">
                        Lembrar de mim
                    </label>
                </div>
            </div>
            
            <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary btn-lg">
                    <i class="fas fa-sign-in-alt me-2"></i>Entrar
                </button>
            </div>
            
            <div class="text-center mt-3">
                <a href="/cliente/register" class="text-muted">
                    <i class="fas fa-user-plus me-1"></i>Não tem uma conta? Cadastre-se
                </a>
            </div>
            
            <div class="text-center mt-2">
                <a href="/" class="text-muted">
                    <i class="fas fa-arrow-left me-1"></i>Voltar para o site
                </a>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }
    
    .login-card {
        background-color: #1a1a1a;
        border: 1px solid #333333;
        border-radius: 12px;
        padding: 40px;
        width: 100%;
        max-width: 400px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.5);
    }
    
    .form-control {
        background-color: #2d2d2d;
        border: 1px solid #404040;
        color: #ffffff;
        border-radius: 8px;
    }
    
    .form-control:focus {
        background-color: #2d2d2d;
        border-color: #3b82f6;
        color: #ffffff;
        box-shadow: 0 0 0 0.2rem rgba(59,130,246,0.25);
    }
    
    .form-control::placeholder {
        color: #888888;
    }
    
    .btn-primary {
        background-color: #3b82f6;
        border-color: #3b82f6;
        border-radius: 8px;
    }
    
    .btn-primary:hover {
        background-color: #2563eb;
        border-color: #2563eb;
    }
    
    .text-muted {
        color: #888888 !important;
    }
    
    .text-light {
        color: #ffffff !important;
    }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user == null)
        {
            errorMessage = "Email ou senha inválidos.";
            return;
        }

        var result = await SignInManager.PasswordSignInAsync(
            user.UserName ?? user.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            
            // Verificar se o usuário é cliente
            var isCliente = await UserManager.IsInRoleAsync(user, "Cliente");
            if (!isCliente)
            {
                // Se não for cliente, fazer logout e mostrar erro
                await SignInManager.SignOutAsync();
                errorMessage = "Este login é apenas para clientes. Use o login administrativo.";
                return;
            }
            
            // Redirecionar usando a mesma abordagem do admin
            var redirectUrl = !string.IsNullOrEmpty(ReturnUrl) ? ReturnUrl : "/";
            RedirectManager.RedirectTo(redirectUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            errorMessage = "Autenticação de dois fatores não suportada.";
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            errorMessage = "Conta bloqueada. Tente novamente mais tarde.";
        }
        else
        {
            errorMessage = "Email ou senha inválidos. Tente novamente.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}