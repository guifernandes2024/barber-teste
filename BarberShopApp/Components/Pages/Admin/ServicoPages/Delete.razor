@page "/admin/servicos/delete"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.EntityFrameworkCore
@using BarberShopApp.Core.Models
@inject IDbContextFactory<BarberShopApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Excluir Serviço - BarberShop</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1><i class="fas fa-trash me-2"></i>Excluir Serviço</h1>
                <a href="/admin/servicos" class="btn btn-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Voltar
                </a>
            </div>

            @if (servico is null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Carregando...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-exclamation-triangle me-2"></i>Confirmar Exclusão</h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>Atenção!</strong> Tem certeza que deseja excluir este serviço? Esta ação não pode ser desfeita.
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Nome do Serviço:</label>
                                    <p class="form-control-plaintext">@servico.Nome</p>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Descrição:</label>
                                    <p class="form-control-plaintext">@servico.Descricao</p>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Preço:</label>
                                    <p class="form-control-plaintext text-success fw-bold">R$ @servico.Preco.ToString("F2")</p>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Duração:</label>
                                    <p class="form-control-plaintext">@servico.DuracaoEmMinutos minutos</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <div class="d-flex gap-2">
                            <EditForm method="post" Model="servico" OnValidSubmit="DeleteServico" FormName="delete" Enhance>
                                <button type="submit" class="btn btn-danger" disabled="@(servico is null)">
                                    <i class="fas fa-trash me-2"></i>Confirmar Exclusão
                                </button>
                            </EditForm>
                            <a href="/admin/servicos" class="btn btn-secondary">
                                <i class="fas fa-times me-2"></i>Cancelar
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Servico? servico;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        servico = await context.Servico.FirstOrDefaultAsync(m => m.Id == Id);

        if (servico is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteServico()
    {
        using var context = DbFactory.CreateDbContext();
        context.Servico.Remove(servico!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/admin/servicos");
    }
}
