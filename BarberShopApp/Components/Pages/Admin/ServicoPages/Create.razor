@page "/admin/servicos/create"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.EntityFrameworkCore
@using BarberShopApp.Core.Models
@inject IDbContextFactory<BarberShopApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

@rendermode InteractiveServer
<PageTitle>Criar Serviço - BarberShop</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-scissors me-2"></i>Criar Novo Serviço</h2>
                <a href="/admin/servicos" class="btn btn-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Voltar
                </a>
            </div>

            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Dados do Serviço</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="Servico" OnValidSubmit="AddServico">
                        <DataAnnotationsValidator />
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="nome" class="form-label">Nome do Serviço *</label>
                                    <InputText id="nome" @bind-Value="Servico.Nome" class="form-control" required />
                                    <ValidationMessage For="() => Servico.Nome" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="preco" class="form-label">Preço *</label>
                                    <InputText id="preco" @bind-Value="PrecoString" @oninput="FormatarPreco" class="form-control" required />
                                    <ValidationMessage For="() => Servico.Preco" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="duracaoemminutos" class="form-label">Duração (minutos) *</label>
                                    <InputNumber id="duracaoemminutos" @bind-Value="Servico.DuracaoEmMinutos" class="form-control" required />
                                    <ValidationMessage For="() => Servico.DuracaoEmMinutos" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="imgurl" class="form-label">URL da Imagem</label>
                                    <InputText id="imgurl" @bind-Value="Servico.ImgUrl" class="form-control" />
                                    <ValidationMessage For="() => Servico.ImgUrl" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <div class="mb-3">
                                    <label for="descricao" class="form-label">Descrição</label>
                                    <InputText id="descricao" @bind-Value="Servico.Descricao" class="form-control" />
                                    <ValidationMessage For="() => Servico.Descricao" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(mensagemErro))
                        {
                            <div class="alert alert-danger" role="alert">
                                @mensagemErro
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(mensagemSucesso))
                        {
                            <div class="alert alert-success" role="alert">
                                @mensagemSucesso
                            </div>
                        }

                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Salvando...</span>
                                }
                                else
                                {
                                    <span>Salvar Serviço</span>
                                }
                            </button>
                            <a href="/admin/servicos" class="btn btn-secondary">Cancelar</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] 
    IJSRuntime JS { get; set; }

    private Servico Servico { get; set; } = new();
    private bool isLoading = false;
    private string mensagemErro = "";
    private string mensagemSucesso = "";

    protected override void OnInitialized()
    {
        Servico = new Servico();
    }

    private string PrecoString
    {
        get => Servico.Preco.ToString("F2");
        set
        {
            if (decimal.TryParse(value.Replace(",", "."), out var preco))
            {
                Servico.Preco = preco;
            }
        }
    }

    private async Task FormatarPreco(ChangeEventArgs e)
    {
        await JS.InvokeVoidAsync("aplicarMascaraPreco", "preco");
    }

    private async Task AddServico()
    {
        try
        {
            isLoading = true;
            mensagemErro = "";
            mensagemSucesso = "";

            using var context = DbFactory.CreateDbContext();
            context.Servico.Add(Servico);
            await context.SaveChangesAsync();
            
            mensagemSucesso = "Serviço criado com sucesso! Redirecionando...";
            StateHasChanged();
            
            // Redirecionar após 1 segundo
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/admin/servicos");
        }
        catch (Exception ex)
        {
            mensagemErro = "Erro ao criar serviço: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
}
