@page "/admin/servicos/edit"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.EntityFrameworkCore
@using BarberShopApp.Core.Models
@inject IDbContextFactory<BarberShopApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

@rendermode InteractiveServer
<PageTitle>Editar Serviço - BarberShop</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-edit me-2"></i>Editar Serviço</h2>
                <a href="/admin/servicos" class="btn btn-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Voltar
                </a>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Carregando...</span>
                    </div>
                </div>
            }
            else if (Servico is null)
            {
                <div class="alert alert-danger" role="alert">
                    Serviço não encontrado.
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Dados do Serviço</h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="Servico" OnValidSubmit="UpdateServico">
                            <DataAnnotationsValidator />
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="nome" class="form-label">Nome do Serviço *</label>
                                        <InputText id="nome" @bind-Value="Servico.Nome" class="form-control" required />
                                        <ValidationMessage For="() => Servico.Nome" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="preco" class="form-label">Preço *</label>
                                        <InputText id="preco" @bind-Value="PrecoString" @oninput="FormatarPreco" class="form-control" required />
                                        <ValidationMessage For="() => Servico.Preco" class="text-danger" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="duracaoemminutos" class="form-label">Duração (minutos) *</label>
                                        <InputNumber id="duracaoemminutos" @bind-Value="Servico.DuracaoEmMinutos" class="form-control" required />
                                        <ValidationMessage For="() => Servico.DuracaoEmMinutos" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="imgurl" class="form-label">URL da Imagem</label>
                                        <InputText id="imgurl" @bind-Value="Servico.ImgUrl" class="form-control" />
                                        <ValidationMessage For="() => Servico.ImgUrl" class="text-danger" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-12">
                                    <div class="mb-3">
                                        <label for="descricao" class="form-label">Descrição</label>
                                        <InputText id="descricao" @bind-Value="Servico.Descricao" class="form-control" />
                                        <ValidationMessage For="() => Servico.Descricao" class="text-danger" />
                                    </div>
                                </div>
                            </div>

                            @if (!string.IsNullOrEmpty(mensagemErro))
                            {
                                <div class="alert alert-danger" role="alert">
                                    @mensagemErro
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(mensagemSucesso))
                            {
                                <div class="alert alert-success" role="alert">
                                    @mensagemSucesso
                                </div>
                            }

                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Salvando...</span>
                                    }
                                    else
                                    {
                                        <span>Salvar Alterações</span>
                                    }
                                </button>
                                <a href="/admin/servicos" class="btn btn-secondary">Cancelar</a>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Inject]
    IJSRuntime JS { get; set; }
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private Servico? Servico { get; set; }
    private bool isLoading = true;
    private bool isSaving = false;
    private string mensagemErro = "";
    private string mensagemSucesso = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            Servico = await context.Servico.FirstOrDefaultAsync(m => m.Id == Id);

            if (Servico is null)
            {
                NavigationManager.NavigateTo("notfound");
            }
        }
        catch (Exception ex)
        {
            mensagemErro = "Erro ao carregar serviço: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private string PrecoString
    {
        get => Servico?.Preco.ToString("F2") ?? "0,00";
        set
        {
            if (Servico != null && decimal.TryParse(value.Replace(",", "."), out var preco))
            {
                Servico.Preco = preco;
            }
        }
    }

    private async Task FormatarPreco(ChangeEventArgs e)
    {
        await JS.InvokeVoidAsync("aplicarMascaraPreco", "preco");
    }

    private async Task UpdateServico()
    {
        try
        {
            isSaving = true;
            mensagemErro = "";
            mensagemSucesso = "";

            using var context = DbFactory.CreateDbContext();
            context.Attach(Servico!).State = EntityState.Modified;

            try
            {
                await context.SaveChangesAsync();
                
                mensagemSucesso = "Serviço atualizado com sucesso! Redirecionando...";
                StateHasChanged();
                
                // Redirecionar após 1 segundo
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/admin/servicos");
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ServicoExists(Servico!.Id))
                {
                    NavigationManager.NavigateTo("notfound");
                }
                else
                {
                    throw;
                }
            }
        }
        catch (Exception ex)
        {
            mensagemErro = "Erro ao atualizar serviço: " + ex.Message;
        }
        finally
        {
            isSaving = false;
        }
    }

    private bool ServicoExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Servico.Any(e => e.Id == id);
    }
}
